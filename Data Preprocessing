# Importing libraries
import numpy as n
import pandas as pd
from sklearn.metrics import accuracy_score, confusion_matrix

# %matplotlib inline
# Reading the train.csv by removing the
# last column since it's an empty column

Train = "/content/drive/MyDrive/sd for ai/Training.csv"

Sym_Data = pd.read_csv(Train) # Data of Various Symptoms

Sym_Data.head()

Sym_Data = Sym_Data.dropna()
Sym_Data

d_C = Sym_Data["prognosis"].value_counts()
t_ds = pd.DataFrame({"Type_Of_Disease": d_C.index,"Total_Counts": d_C.values}) # temp dataset


# Performing the train-test split
X = data.iloc[:,:-1]
y = data.iloc[:, -1]
X_train, X_test, y_train, y_test =train_test_split(X, y, test_size = 0.2, random_state = 24)

print(f"Train: {X_train.shape}, {y_train.shape}")
print(f"Test: {X_test.shape}, {y_test.shape}")

# training and testing SVM Classifier

svm_model = SVC()
svm_model.fit(X_train, y_train)
preds = svm_model.predict(X_test)

print(f"SVM Classifier Accuracy on training data: {accuracy_score(y_train, svm_model.predict(X_train))*100}")

print(f"SVM Classifier Accuracy on testing data: {accuracy_score(y_test, preds)*100}")

cf_matrix = confusion_matrix(y_test, preds)
plt.figure(figsize=(12,8))
sns.heatmap(cf_matrix, annot=True)
plt.title("SVM Classifier Confusion Matrix on Testing Data")
plt.show()

# training and testing Random Forest Classifier
rfm = RandomForestClassifier(random_state=18)
rfm.fit(X_train, y_train)
p = rfm.predict(X_test)
print(f"Accuracy of Random Forest for training data: {accuracy_score(y_train, rfm.predict
(X_train))*100}")
print(f"Accuracy of Random Forest for testing data: {accuracy_score(y_test, p)*100}")
cfm = confusion_matrix(y_test, p)
plt.figure(figsize=(12,8))
sns.heatmap(cfm,cmap="YlGnBu", annot=True)
plt.title("Random Forest Classifier Confusion Matrix")
plt.show()
