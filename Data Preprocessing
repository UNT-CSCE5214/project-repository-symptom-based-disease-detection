# Importing libraries
import numpy as n
import pandas as pd
from sklearn.metrics import accuracy_score, confusion_matrix

# %matplotlib inline
# Reading the train.csv by removing the
# last column since it's an empty column

Train = "/content/drive/MyDrive/sd for ai/Training.csv"

Sym_Data = pd.read_csv(Train) # Data of Various Symptoms

Sym_Data.head()

Sym_Data = Sym_Data.dropna()
Sym_Data

d_C = Sym_Data["prognosis"].value_counts()
t_ds = pd.DataFrame({"Type_Of_Disease": d_C.index,"Total_Counts": d_C.values}) # temp dataset


# Performing the train-test split
X = data.iloc[:,:-1]
y = data.iloc[:, -1]
X_train, X_test, y_train, y_test =train_test_split(X, y, test_size = 0.2, random_state = 24)

print(f"Train: {X_train.shape}, {y_train.shape}")
print(f"Test: {X_test.shape}, {y_test.shape}")

# training and testing SVM Classifier

svm_model = SVC()
svm_model.fit(X_train, y_train)
preds = svm_model.predict(X_test)

print(f"SVM Classifier Accuracy on training data: {accuracy_score(y_train, svm_model.predict(X_train))*100}")

print(f"SVM Classifier Accuracy on testing data: {accuracy_score(y_test, preds)*100}")

cf_matrix = confusion_matrix(y_test, preds)
plt.figure(figsize=(12,8))
sns.heatmap(cf_matrix, annot=True)
plt.title("SVM Classifier Confusion Matrix on Testing Data")
plt.show()

# training and testing Random Forest Classifier
rfm = RandomForestClassifier(random_state=18)
rfm.fit(X_train, y_train)
p = rfm.predict(X_test)
print(f"Accuracy of Random Forest for training data: {accuracy_score(y_train, rfm.predict
(X_train))*100}")
print(f"Accuracy of Random Forest for testing data: {accuracy_score(y_test, p)*100}")
cfm = confusion_matrix(y_test, p)
plt.figure(figsize=(12,8))
sns.heatmap(cfm,cmap="YlGnBu", annot=True)
plt.title("Random Forest Classifier Confusion Matrix")
plt.show()

# making prediction by taking mode of predictions made by all the classifiers
svm_p = final_svm.predict(test_X)
nb_p = final_nbm.predict(test_X)
rf_p = final_rfm.predict(test_X)
final_p = [mode([i,j,k])[0][0] for i,j,k in zip(svm_p, nb_p, rf_p)]
print(f"Accuracy of combined model for Testing data: {accuracy_score(test_Y, final_p)*100
}")
cfm = confusion_matrix(test_Y, final_p)
plt.figure(figsize=(12,8))
sns.heatmap(cfm,cmap="YlGnBu",annot = True)
plt.title("Combined Model Confusion Matrix on Testing Dataset")
plt.show()


# training all the models on whole data
final_svm = SVC()
final_nbm = GaussianNB()
final_rfm = RandomForestClassifier(random_state = 18)
final_svm.fit(X, y)
final_nbm.fit(X, y)
final_rfm.fit(X, y)


# making final prediction by taking mode of all predictions
final_prediction = mode([rf_prediction, nb_prediction, svm_prediction])[0][0]
predictions = {
"rfm_prediction": rf_prediction,
"naive_bayes_prediction": nb_prediction,
"svm_model_prediction": svm_prediction,
"final_prediction":final_prediction


# processing the contents of infobox present in wikipedia site
for row in info_table_from_wikipedia.find_all("tr"):
Sym_dis=row.find("th",{"scope":"row"})
if Sym_dis is not None:
symptom = str(row.find("td"))
symptom = symptom.replace('.','')
symptom = symptom.replace(';',',')
symptom = symptom.replace('<b>','<b> \n')
symptom = re.sub(r'<a.*?>','',symptom) # removing hyperlinks
symptom = re.sub(r'</a>','',symptom) # removing hyperlinks
symptom = re.sub(r'<[^<]+?>',' ',symptom) # all the tags
symptom = re.sub(r'\[.*\]','',symptom) # removing citation t
ext
symptom = symptom.replace("&gt",">")
ret+= Sym_dis.get_text()+" - "+symptom+"\n"
# print(Sym_dis.get_text(),"-",symptom)
filled = 1
if filled:
break
return ret

# generating individual outputs
rf_prediction = d_dic["predictions_classes"][final_rfm.predict(input_data)[0]]
nb_prediction = d_dic["predictions_classes"][final_nbm.predict(input_data)[0]]
svm_prediction = d_dic["predictions_classes"][final_svm.predict(input_data)[0]]

